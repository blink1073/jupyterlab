{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "\n",
        "types = [\n",
        "    \"t3.medium\",\n",
        "    \"g4dn.xlarge\",\n",
        "    \"m5.large\",\n",
        "    \"c5.xlarge\",\n",
        "    \"t3.micro\",\n",
        "    \"t3.small\",\n",
        "    \"t3.large\",\n",
        "    \"t3.xlarge\",\n",
        "    \"t3.2xlarge\",\n",
        "    \"m5.xlarge\",\n",
        "    \"m5.2xlarge\",\n",
        "    \"m5.4xlarge\",\n",
        "    \"m5.8xlarge\",\n",
        "    \"m5.12xlarge\",\n",
        "    \"m5.16xlarge\",\n",
        "    \"m5.24xlarge\",\n",
        "    \"c5.large\",\n",
        "    \"c5.xlarge\",\n",
        "    \"c5.2xlarge\",\n",
        "    \"c5.4xlarge\",\n",
        "    \"c5.9xlarge\",\n",
        "    \"c5.12xlarge\",\n",
        "    \"c5.18xlarge\",\n",
        "    \"c5.24xlarge\",\n",
        "    \"p3.2xlarge\",\n",
        "    \"p3.8xlarge\",\n",
        "    \"p3.16xlarge\",\n",
        "    \"g4dn.2xlarge\",\n",
        "    \"g4dn.4xlarge\",\n",
        "    \"g4dn.8xlarge\",\n",
        "    \"g4dn.12xlarge\",\n",
        "    \"g4dn.16xlarge\"\n",
        "]\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Instance type</th>\n",
              "      <th>Instance family</th>\n",
              "      <th>Instance size</th>\n",
              "      <th>Availability zones</th>\n",
              "      <th>Free-Tier eligible</th>\n",
              "      <th>Bare metal</th>\n",
              "      <th>Hypervisor</th>\n",
              "      <th>vCPUs</th>\n",
              "      <th>Architecture</th>\n",
              "      <th>Cores</th>\n",
              "      <th>...</th>\n",
              "      <th>GPUs</th>\n",
              "      <th>FPGAs</th>\n",
              "      <th>Auto Recovery support</th>\n",
              "      <th>Supported root devices</th>\n",
              "      <th>Dedicated Host support</th>\n",
              "      <th>On-Demand Hibernation support</th>\n",
              "      <th>Burstable Performance support</th>\n",
              "      <th>Current generation</th>\n",
              "      <th>On-Demand Linux pricing</th>\n",
              "      <th>On-Demand Windows pricing</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>a1.2xlarge</td>\n",
              "      <td>a1</td>\n",
              "      <td>2xlarge</td>\n",
              "      <td>us-west-2b, us-west-2c</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>nitro</td>\n",
              "      <td>8</td>\n",
              "      <td>arm64</td>\n",
              "      <td>8</td>\n",
              "      <td>...</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>True</td>\n",
              "      <td>0.204 USD per Hour</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>a1.4xlarge</td>\n",
              "      <td>a1</td>\n",
              "      <td>4xlarge</td>\n",
              "      <td>us-west-2b, us-west-2c</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>nitro</td>\n",
              "      <td>16</td>\n",
              "      <td>arm64</td>\n",
              "      <td>16</td>\n",
              "      <td>...</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>True</td>\n",
              "      <td>0.408 USD per Hour</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>a1.large</td>\n",
              "      <td>a1</td>\n",
              "      <td>large</td>\n",
              "      <td>us-west-2b, us-west-2c</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>nitro</td>\n",
              "      <td>2</td>\n",
              "      <td>arm64</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>True</td>\n",
              "      <td>0.051 USD per Hour</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>a1.medium</td>\n",
              "      <td>a1</td>\n",
              "      <td>medium</td>\n",
              "      <td>us-west-2b, us-west-2c</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>nitro</td>\n",
              "      <td>1</td>\n",
              "      <td>arm64</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>True</td>\n",
              "      <td>0.0255 USD per Hour</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>a1.metal</td>\n",
              "      <td>a1</td>\n",
              "      <td>metal</td>\n",
              "      <td>us-west-2b, us-west-2c</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>16</td>\n",
              "      <td>arm64</td>\n",
              "      <td>-</td>\n",
              "      <td>...</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>TRUE</td>\n",
              "      <td>-</td>\n",
              "      <td>-</td>\n",
              "      <td>True</td>\n",
              "      <td>0.408 USD per Hour</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 38 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "  Instance type Instance family Instance size      Availability zones  \\\n",
              "0    a1.2xlarge              a1       2xlarge  us-west-2b, us-west-2c   \n",
              "1    a1.4xlarge              a1       4xlarge  us-west-2b, us-west-2c   \n",
              "2      a1.large              a1         large  us-west-2b, us-west-2c   \n",
              "3     a1.medium              a1        medium  us-west-2b, us-west-2c   \n",
              "4      a1.metal              a1         metal  us-west-2b, us-west-2c   \n",
              "\n",
              "   Free-Tier eligible  Bare metal Hypervisor  vCPUs Architecture Cores  ...  \\\n",
              "0               False       False      nitro      8        arm64     8  ...   \n",
              "1               False       False      nitro     16        arm64    16  ...   \n",
              "2               False       False      nitro      2        arm64     2  ...   \n",
              "3               False       False      nitro      1        arm64     1  ...   \n",
              "4               False        True        NaN     16        arm64     -  ...   \n",
              "\n",
              "  GPUs FPGAs Auto Recovery support  Supported root devices  \\\n",
              "0    -     -                  TRUE                       -   \n",
              "1    -     -                  TRUE                       -   \n",
              "2    -     -                  TRUE                       -   \n",
              "3    -     -                  TRUE                       -   \n",
              "4    -     -                  TRUE                       -   \n",
              "\n",
              "   Dedicated Host support On-Demand Hibernation support  \\\n",
              "0                    TRUE                             -   \n",
              "1                    TRUE                             -   \n",
              "2                    TRUE                             -   \n",
              "3                    TRUE                             -   \n",
              "4                    TRUE                             -   \n",
              "\n",
              "  Burstable Performance support Current generation On-Demand Linux pricing  \\\n",
              "0                             -               True      0.204 USD per Hour   \n",
              "1                             -               True      0.408 USD per Hour   \n",
              "2                             -               True      0.051 USD per Hour   \n",
              "3                             -               True     0.0255 USD per Hour   \n",
              "4                             -               True      0.408 USD per Hour   \n",
              "\n",
              "  On-Demand Windows pricing  \n",
              "0                       NaN  \n",
              "1                       NaN  \n",
              "2                       NaN  \n",
              "3                       NaN  \n",
              "4                       NaN  \n",
              "\n",
              "[5 rows x 38 columns]"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": ["df = pd.read_csv('instancetypes.csv')\n", "df.head()"]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['Instance type', 'Instance family', 'Instance size',\n",
              "       'Availability zones', 'Free-Tier eligible', 'Bare metal', 'Hypervisor',\n",
              "       'vCPUs', 'Architecture', 'Cores', 'Valid cores', 'Threads per core',\n",
              "       'Valid threads per core', 'Sustained clock speed (GHz)', 'Memory (MiB)',\n",
              "       'Storage (GB)', 'Local instance storage', 'Storage type',\n",
              "       'Storage disk count', 'EBS encryption support',\n",
              "       'EBS optimization support', 'Network performance', 'ENA support',\n",
              "       'Maximum number of network interfaces', 'IPv4 addresses per interface',\n",
              "       'IPv6 addresses per interface', 'IPv6 support',\n",
              "       'Supported placement group strategies', 'GPUs', 'FPGAs',\n",
              "       'Auto Recovery support', 'Supported root devices',\n",
              "       'Dedicated Host support', 'On-Demand Hibernation support',\n",
              "       'Burstable Performance support', 'Current generation',\n",
              "       'On-Demand Linux pricing', 'On-Demand Windows pricing'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": ["df.columns"]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "instance_data=[\n",
            "instance_info('t3.medium', '4', '2', '0'),\n",
            "instance_info('g4dn.xlarge', '16', '4', '1'),\n",
            "instance_info('m5.large', '8', '2', '0'),\n",
            "instance_info('c5.xlarge', '8', '4', '0'),\n",
            "instance_info('t3.micro', '1', '2', '0'),\n",
            "instance_info('t3.small', '2', '2', '0'),\n",
            "instance_info('t3.large', '8', '2', '0'),\n",
            "instance_info('t3.xlarge', '16', '4', '0'),\n",
            "instance_info('t3.2xlarge', '32', '8', '0'),\n",
            "instance_info('m5.xlarge', '16', '4', '0'),\n",
            "instance_info('m5.2xlarge', '32', '8', '0'),\n",
            "instance_info('m5.4xlarge', '64', '16', '0'),\n",
            "instance_info('m5.8xlarge', '128', '32', '0'),\n",
            "instance_info('m5.12xlarge', '192', '48', '0'),\n",
            "instance_info('m5.16xlarge', '256', '64', '0'),\n",
            "instance_info('m5.24xlarge', '384', '96', '0'),\n",
            "instance_info('c5.large', '4', '2', '0'),\n",
            "instance_info('c5.xlarge', '8', '4', '0'),\n",
            "instance_info('c5.2xlarge', '16', '8', '0'),\n",
            "instance_info('c5.4xlarge', '32', '16', '0'),\n",
            "instance_info('c5.9xlarge', '72', '36', '0'),\n",
            "instance_info('c5.12xlarge', '96', '48', '0'),\n",
            "instance_info('c5.18xlarge', '144', '72', '0'),\n",
            "instance_info('c5.24xlarge', '192', '96', '0'),\n",
            "instance_info('p3.2xlarge', '61', '8', '1'),\n",
            "instance_info('p3.8xlarge', '244', '32', '4'),\n",
            "instance_info('p3.16xlarge', '488', '64', '8'),\n",
            "instance_info('g4dn.2xlarge', '32', '8', '1'),\n",
            "instance_info('g4dn.4xlarge', '64', '16', '1'),\n",
            "instance_info('g4dn.8xlarge', '128', '32', '1'),\n",
            "instance_info('g4dn.12xlarge', '192', '48', '4'),\n",
            "instance_info('g4dn.16xlarge', '256', '64', '1'),\n",
            "]\n"
          ]
        }
      ],
      "source": [
        "output = \"instance_data=[\\n\"\n",
        "for itype in types:\n",
        "    for (i, row) in df.iterrows():\n",
        "        if row['Instance type'] == itype:\n",
        "            ram = int(row['Memory (MiB)'] / 2**10)\n",
        "            cpu = row['vCPUs']\n",
        "            gpu = row['GPUs']\n",
        "            if gpu == '-':\n",
        "                gpu = 0\n",
        "            output += f\"instance_info('{itype}', '{ram}', '{cpu}', '{gpu}'),\\n\"\n",
        "output += ']'\n",
        "print(output)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [],
      "source": [
        "from collections import namedtuple\n",
        "instance_info = namedtuple('instance_info', ['InstanceName', 'InstanceRAM', 'InstanceCPU', 'InstanceGPU'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [],
      "source": [
        "instance_data=[\n",
        "instance_info('p3.2xlarge', '61.0', '8', '1'),\n",
        "instance_info('p3.8xlarge', '244.0', '32', '4'),\n",
        "instance_info('p3.16xlarge', '488.0', '64', '8'),\n",
        "instance_info('p2.xlarge', '61.0', '4', '1'),\n",
        "instance_info('p2.8xlarge', '488.0', '32', '8'),\n",
        "instance_info('p2.16xlarge', '732.0', '64', '16'),\n",
        "instance_info('t2.medium', '4.0', '2', '0'),\n",
        "instance_info('t2.large', '8.0', '2', '0'),\n",
        "instance_info('t2.xlarge', '16.0', '4', '0'),\n",
        "instance_info('t2.2xlarge', '32.0', '8', '0'),\n",
        "instance_info('t3.medium', '4.0', '2', '0'),\n",
        "instance_info('t3.large', '8.0', '2', '0'),\n",
        "instance_info('t3.xlarge', '16.0', '4', '0'),\n",
        "instance_info('t3.2xlarge', '32.0', '8', '0'),\n",
        "instance_info('m4.xlarge', '16.0', '4', '0'),\n",
        "instance_info('m4.2xlarge', '32.0', '8', '0'),\n",
        "instance_info('m4.4xlarge', '64.0', '16', '0'),\n",
        "instance_info('m4.10xlarge', '160.0', '40', '0'),\n",
        "instance_info('m4.16xlarge', '256.0', '64', '0'),\n",
        "instance_info('m5.xlarge', '16.0', '4', '0'),\n",
        "instance_info('m5.2xlarge', '32.0', '8', '0'),\n",
        "instance_info('m5.4xlarge', '64.0', '16', '0'),\n",
        "instance_info('m5.12xlarge', '192.0', '48', '0'),\n",
        "instance_info('m5.24xlarge', '384.0', '96', '0'),\n",
        "instance_info('c4.xlarge', '7.5', '4', '0'),\n",
        "instance_info('c4.2xlarge', '15.0', '8', '0'),\n",
        "instance_info('c4.4xlarge', '30.0', '16', '0'),\n",
        "instance_info('c4.8xlarge', '60.0', '36', '0'),\n",
        "instance_info('c5.xlarge', '8.0', '4', '0'),\n",
        "instance_info('c5.2xlarge', '16.0', '8', '0'),\n",
        "instance_info('c5.4xlarge', '32.0', '16', '0'),\n",
        "instance_info('c5.9xlarge', '72.0', '36', '0'),\n",
        "instance_info('c5.18xlarge', '144.0', '72', '0'),\n",
        "instance_info('c5d.xlarge', '8.0', '4', '0'),\n",
        "instance_info('c5d.2xlarge', '16.0', '8', '0'),\n",
        "instance_info('c5d.4xlarge', '32.0', '16', '0'),\n",
        "instance_info('c5d.9xlarge', '72.0', '36', '0'),\n",
        "instance_info('c5d.18xlarge', '144.0', '72', '0'),\n",
        "]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {},
      "outputs": [],
      "source": ["foo = instance_data[0]"]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "OrderedDict([('InstanceName', 'p3.2xlarge'),\n",
              "             ('InstanceRAM', '61.0'),\n",
              "             ('InstanceCPU', '8'),\n",
              "             ('InstanceGPU', '1')])"
            ]
          },
          "execution_count": 34,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": ["foo._asdict()"]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 Foo",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
